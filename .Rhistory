}
Numbers_and_factors <- c(Numbers_and_factors, numbers[j], factors_for_x)
}
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
Numbers_and_factors <- c()
for(j in 1:length(numbers)){
x = numbers[j]
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
}
Numbers_and_factors <- c(Numbers_and_factors, numbers[j], factors_for_x)
}
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
for(j in 1:length(numbers)){
x = numbers[j]
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
}
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
)
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
for(j in 1:length(numbers)){
x = numbers[j]
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
}
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
Numbers_and_factors <- rbind(Numbers_and_factors, new_row)
}
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
for(j in 1:length(numbers)){
x = numbers[j]
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
Numbers_and_factors <- rbind(factors_df, new_row)
}
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
for(j in 1:length(numbers)){
x = numbers[j]
factors_for_length <- prime_factors_Loop(x)
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
Numbers_and_factors <- rbind(factors_df, new_row)
}
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
for(j in 1:length(numbers)){
x = numbers[j]
factors_for_x <- prime_factors_Loop(x)
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
factors_df <- rbind(factors_df, new_row)
}
View(factors_df)
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
for(j in 1:length(numbers)){
x = numbers[j]
factors_for_x <- prime_factors_Loop(x)
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
factors_df <- rbind(factors_df, new_row)
}
View(factors_df)
prime_factors_Loop(74)
which(factors_df$factor_1 == 2, factors_df$factor_2 == 37)
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
for(j in 1:length(numbers)){
x = numbers[j]
factors_for_x <- prime_factors_Loop(x)
if((length(factors_for_x)) > 2) {
x = 74
factors_for_x <- prime_factors_loop(x)
}
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
factors_df <- rbind(factors_df, new_row) #data frame containing each number within the vector, along with their respective prime factors
#After examining data frame, 75 is the only number with more than two factors, and therefore is the incorrect number
factors_for_74 <- prime_factors_Loop(74) #Runs the loop to check factors for 74 instead, outputting a pair of two factors that are prime and unique
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
for(j in 1:length(numbers)){
x = numbers[j]
factors_for_x <- prime_factors_Loop(x)
if((length(factors_for_x)) > 2) {
x = 74
factors_for_x <- prime_factors_loop(x)
}
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
factors_df <- rbind(factors_df, new_row) }#data frame containing each number within the vector, along with their respective prime factors
#After examining data frame, 75 is the only number with more than two factors, and therefore is the incorrect number
factors_for_74 <- prime_factors_Loop(74) #Runs the loop to check factors for 74 instead, outputting a pair of two factors that are prime and unique
View(factors_df)
View(factors_df)
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
for(j in 1:length(numbers)){
x = numbers[j]
factors_for_x <- prime_factors_Loop(x)
if((length(factors_for_x)) > 2) {
j = 74
factors_for_x <- prime_factors_loop(j)
}
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
factors_df <- rbind(factors_df, new_row) }#data frame containing each number within the vector, along with their respective prime factors
#After examining data frame, 75 is the only number with more than two factors, and therefore is the incorrect number
factors_for_74 <- prime_factors_Loop(74) #Runs the loop to check factors for 74 instead, outputting a pair of two factors that are prime and unique
View(factors_df)
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
for(j in 1:length(numbers)){
x = numbers[j]
factors_for_x <- prime_factors_Loop(x)
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
factors_df <- rbind(factors_df, new_row) }#data frame containing each number within the vector, along with their respective prime factors
#After examining data frame, 75 is the only number with more than two factors, and therefore is the incorrect number
factors_for_74 <- prime_factors_Loop(74) #Runs the loop to check factors for 74 instead, outputting a pair of two factors that are prime and unique
View(factors_df)
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
for(j in 1:length(numbers)){
x = numbers[j]
factors_for_x <- prime_factors_Loop(x)
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
factors_df <- rbind(factors_df, new_row)
}#data frame containing each number within the vector, along with their respective prime factors
#After examining data frame, 75 is the only number with more than two factors, and therefore is the incorrect number
factors_for_74 <- prime_factors_Loop(74) #Runs the loop to check factors for 74 instead, outputting a pair of two factors that are prime and unique
View(factors_df)
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors from two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  # If i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
for(j in 1:length(numbers)){
x = numbers[j]
factors_for_x <- prime_factors_Loop(x)
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
factors_df <- rbind(factors_df, new_row)
}#data frame containing each number within the vector, along with their respective prime factors
#After examining data frame, 75 is the only number with more than two factors, and therefore is the incorrect number
factors_for_74 <- prime_factors_Loop(74) #Runs the loop to check factors for 74 instead, outputting a pair of two factors that are prime and unique
factors_df$Number[which(factors_df$Number == 75)] <- 74
factors_df$factor_1[which(factors_df$Number == 75)] <- factors_for_74[1]
factors_df$factor_2[which(factors_df$Number == 75)] <- factors_for_74[2]
factors_df$factor_3[which(factors_df$Number == 75)] <- NA
View(factors_df)
factors_df$factor_1[which(factors_df$Number == 75)] <- factors_for_74[1]
factors_df$factor_2[which(factors_df$Number == 75)] <- factors_for_74[2]
factors_for_74
factors_df$factor_1[which(factors_df$Number == 75)]
which(factors_df$Number == 75)
which(factors_df$Number = 75)
which(factors_df$Number == 75)
View(factors_df)
numbers <- c(6, 10, 14, 15, 21,
22, 26, 33, 34, 35,
38, 39, 46, 51, 55,
57, 58, 62, 65, 69,
75, 77, 82, 85, 86,
87, 91, 93, 94, 95)
factors_df <- data.frame(Number = numeric(),
factor_1 = numeric(),
factor_2 = numeric(),
factor_3 = numeric (),
stringsAsFactors=FALSE)
prime_factors_Loop <- function(x) {
factors_for_x <- c()   # Vector that will store factors for the value of x
i <- 2           # Start checking factors beginning two
while (x >= i) {  # Continue looping while x is greater than or equal to i
if (x %% i == 0) {   # If i is a factor of x
factors_for_x <- c(factors_for_x, i)  # Add i to the list of factors
x <- x / i  # Divide x by i to remove that factor
} else {
i <- i + 1  #if i is not a factor, move to the next number
}
}
return(factors_for_x) #returns the vector containing the prime factors for x
}
for(j in 1:length(numbers)){
x = numbers[j]
factors_for_x <- prime_factors_Loop(x)
new_row <- data.frame(Number = numbers[j],
factor_1 = factors_for_x[1],
factor_2 = factors_for_x[2],
factor_3 = factors_for_x[3],
stringsAsFactors = FALSE)
factors_df <- rbind(factors_df, new_row)
}#data frame containing each number within the vector, along with their respective prime factors
#After examining data frame, 75 is the only number with more than two factors, and therefore is the incorrect number
factors_for_74 <- prime_factors_Loop(74) #Runs the loop to check factors for 74 instead, outputting a pair of two factors that are prime and unique
#After examining the dataframe, we've observed 75's position as 21, so we can now replace it's values with that of the correct number
factors_df$Number[21] <- 74 #replaces 75 with the correct number, 74
factors_df$factor_1[21] <- factors_for_74[1] #Replaces factor 1 for 74
factors_df$factor_2[21] <- factors_for_74[2] #Replaces factor 2 for 74
factors_df$factor_3[21] <- NA #Eliminates factor 3 as no numbers have more than two factors
View(factors_df)
